//JESUS ALBERTO BAUTISTA RAMIREZ 362312954 //
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 200

typedef struct {
    char **mapa;
    int alto;
    int ancho;
} Laberinto;

char** crearMatriz(int filas, int columnas) {
    char **matriz = (char**)malloc(filas * sizeof(char*));
    for (int i = 0; i < filas; i++) {
        matriz[i] = (char*)calloc(columnas + 1, sizeof(char));
    }
    return matriz;
}

void liberarMatriz(char **matriz, int filas) {
    for (int i = 0; i < filas; i++) {
        free(matriz[i]);
    }
    free(matriz);
}

int leerLaberinto(Laberinto *lab, const char *nombreArchivo) {
    FILE *archivo = fopen(nombreArchivo, "r");
    if (!archivo) {
        perror("No se pudo abrir el archivo");
        return 0;
    }

    char buffer[MAX_SIZE];
    int filas = 0, columnas = 0;

    while (fgets(buffer, MAX_SIZE, archivo)) {
        int len = strlen(buffer);
        if (buffer[len - 1] == '\n') buffer[--len] = '\0';
        if (len > columnas) columnas = len;
        filas++;
    }

    lab->alto = filas;
    lab->ancho = columnas;
    lab->mapa = crearMatriz(filas, columnas);

    rewind(archivo);
    for (int i = 0; i < filas; i++) {
        if (fgets(buffer, MAX_SIZE, archivo)) {
            int len = strlen(buffer);
            if (buffer[len - 1] == '\n') buffer[--len] = '\0';
            for (int j = 0; j < columnas; j++) {
                lab->mapa[i][j] = (j < len) ? buffer[j] : ' ';
            }
            lab->mapa[i][columnas] = '\0';
        }
    }

    fclose(archivo);
    return 1;
}

void imprimirLaberinto(Laberinto *lab) {
    for (int i = 0; i < lab->alto; i++) {
        printf("%s\n", lab->mapa[i]);
    }
}

int buscarCamino(Laberinto *lab, int x, int y, char **visitado) {
    if (x < 0 || y < 0 || x >= lab->alto || y >= lab->ancho) return 0;
    if (visitado[x][y] || lab->mapa[x][y] == '|' || lab->mapa[x][y] == '-') return 0;
    if (lab->mapa[x][y] == 'S') return 1;

    visitado[x][y] = 1;

    if (lab->mapa[x][y] != 'E') lab->mapa[x][y] = '*';

    int dx[] = {-1, 1, 0, 0};
    int dy[] = {0, 0, -1, 1};

    for (int i = 0; i < 4; i++) {
        if (buscarCamino(lab, x + dx[i], y + dy[i], visitado)) return 1;
    }

    if (lab->mapa[x][y] != 'E') lab->mapa[x][y] = ' ';
    return 0;
}

int resolverLaberinto(Laberinto *lab) {
    int inicioX = -1, inicioY = -1;

    for (int i = 0; i < lab->alto; i++) {
        for (int j = 0; j < lab->ancho; j++) {
            if (lab->mapa[i][j] == 'E') {
                inicioX = i;
                inicioY = j;
                break;
            }
        }
        if (inicioX != -1) break;
    }

    if (inicioX == -1) return 0;

    char **visitado = crearMatriz(lab->alto, lab->ancho);
    int resultado = buscarCamino(lab, inicioX, inicioY, visitado);
    liberarMatriz(visitado, lab->alto);
    return resultado;
}

int main() {
    Laberinto lab;

    if (!leerLaberinto(&lab, "Laberinto.txt")) {
        return 1;
    }

    if (resolverLaberinto(&lab)) {
        printf("Ruta encontrada:\n");
        imprimirLaberinto(&lab);
    } else {
        printf("No se encontr√≥ ninguna salida.\n");
    }

    liberarMatriz(lab.mapa, lab.alto);
    return 0;
}
